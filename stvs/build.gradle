plugins {
    //id 'com.github.jacobono.jaxb' version '1.3.5'
    //id 'com.github.kt3k.coveralls' version '2.8.2'
    //id 'net.saliman.cobertura' version '2.3.1'
    id("application")
    id("antlr")
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

version = "1.4.0-beta"

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    'build/generated-src/antlr/main'
            ]
        }
    }
}

javadoc {
    failOnError false
    options.charSet = 'UTF-8'
}

javafx {
    version = "21"
    modules = ["javafx.controls", "javafx.controls", "javafx.fxml", "javafx.graphics", "javafx.web"]
}

dependencies {
    implementation project(':lang')
    implementation project(':geteta')


    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'de.tu-dresden.inf.lat.jsexp:jsexp:0.2.2'
    implementation 'org.apache.commons:commons-lang3:3.1'
    implementation 'commons-io:commons-io:2.9.0'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'org.fxmisc.richtext:richtextfx:0.6.10'
    implementation 'org.antlr:antlr4-runtime:4.7'
    implementation group: 'de.jensd', name: 'fontawesomefx', version: '8.9'
    implementation 'org.slf4j:slf4j-jdk14:1.8.0-alpha2'

    implementation 'org.fxmisc.cssfx:cssfx:1.0.0'

    implementation 'org.controlsfx:controlsfx:8.40.13'

    testImplementation 'junit:junit:4.13.2'

    antlr 'org.antlr:antlr4:4.7'

    testImplementation group: 'com.googlecode.junit-toolbox', name: 'junit-toolbox', version: '2.2'
    testImplementation "org.testfx:testfx-core:4.0.+"
    testImplementation "org.testfx:testfx-junit:4.0.+"
    testImplementation "org.mockito:mockito-core:2.4.0"
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.0RC2'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '1.7.0RC2'
}

System.setProperty('javax.xml.accessExternalSchema', 'file')

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

/*jaxb {
    xjc {
        xsdDir "src/main/resources/fileFormats/"
        destinationDir "build/generated-src/jaxb/"
        args = ["-encoding", "UTF-8"]
    }
}*/

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages"]
}

mainClassName = "edu.kit.iti.formal.stvs.StvsApplication"

ext.sharedManifest = manifest {
    attributes('Implementation-Title': 'StructuredText Verification Studio (stvs)',
            'Implementation-Version': version,
            'Specification-Version': getVersionName(),
            "Main-Class": mainClassName)
}

test {
    filter {
        includeTestsMatching "edu.kit.iti.formal.stvs.model.*"
        includeTestsMatching "edu.kit.iti.formal.stvs.logic.*"
    }


    useJUnit {
        excludeCategories 'edu.kit.iti.formal.stvs.Performance'
        excludeCategories 'edu.kit.iti.formal.stvs.Demo'
        excludeCategories 'edu.kit.iti.formal.stvs.RandomTest'
    }

    testLogging {
        showStandardStreams = true
    }
}


task guiTest(type: Test) {
    filter {
        includeTestsMatching "edu.kit.iti.formal.stvs.view.*"
    }
    useJUnit {
        excludeCategories 'edu.kit.iti.formal.stvs.Demo'
        excludeCategories 'edu.kit.iti.formal.stvs.Performance'
    }
    testLogging {
        showStandardStreams = true
    }
}

// coverage
//cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report

plugins {
    //id 'com.github.jacobono.jaxb' version '1.3.5'
    //id 'com.github.kt3k.coveralls' version '2.8.2'
    //id 'net.saliman.cobertura' version '2.3.1'
    id("application")
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.22'
}

version = "1.5.0-beta"

javadoc {
    failOnError false
    options.charSet = 'UTF-8'
}

javafx {
    version = "21"
    modules = ["javafx.controls", "javafx.controls", "javafx.fxml", "javafx.graphics", "javafx.web"]
}

dependencies {
    implementation project(':lang')
    implementation project(':geteta')

    implementation("no.tornado:tornadofx:1.7.20")
    implementation group: 'com.miglayout', name: 'miglayout-javafx', version: '11.3'
    implementation group: 'org.fxmisc.richtext', name: 'richtextfx', version: '0.11.2'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1'
    implementation("org.kordamp.ikonli:ikonli-materialdesign2-pack:12.3.1")
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'com.pixelduke:fxribbon:1.2.2'
    implementation("org.jfxtras:jmetro:11.6.15")

    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'de.tu-dresden.inf.lat.jsexp:jsexp:0.2.2'
    implementation 'org.apache.commons:commons-lang3:3.1'
    implementation 'commons-io:commons-io:2.9.0'
    implementation 'org.fxmisc.cssfx:cssfx:1.0.0'
    implementation 'org.controlsfx:controlsfx:8.40.13'

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3")

    testImplementation "org.testfx:testfx-core:4.0.+"
    testImplementation "org.testfx:testfx-junit:4.0.+"
    testImplementation "org.mockito:mockito-core:2.4.0"
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '1.7.0RC2'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '1.7.0RC2'
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

/*jaxb {
    xjc {
        xsdDir "src/main/resources/fileFormats/"
        destinationDir "build/generated-src/jaxb/"
        args = ["-encoding", "UTF-8"]
    }
}*/


mainClassName = "edu.kit.iti.formal.stvs.StvsApplication"

ext.sharedManifest = manifest {
    attributes('Implementation-Title': 'StructuredText Verification Studio (stvs)',
            'Implementation-Version': version,
            'Specification-Version': getVersionName(),
            "Main-Class": mainClassName)
}

test {
    filter {
        includeTestsMatching "edu.kit.iti.formal.stvs.model.*"
        includeTestsMatching "edu.kit.iti.formal.stvs.logic.*"
    }


    useJUnitPlatform() {
        exclude 'edu.kit.iti.formal.stvs.Performance'
        exclude 'edu.kit.iti.formal.stvs.Demo'
        exclude 'edu.kit.iti.formal.stvs.RandomTest'
    }

    testLogging {
        showStandardStreams = true
    }
}


task guiTest(type: Test) {
    /*filter {
        //includeTestsMatching "edu.kit.iti.formal.stvs.view.*"
    }
    useJUnitPlatform {
        exclude 'edu.kit.iti.formal.stvs.Demo'
        exclude 'edu.kit.iti.formal.stvs.Performance'
    }*/
    testLogging {
        showStandardStreams = true
    }
}

//compileKotlin.dependsOn("generateGrammarSource")
//compileTestKotlin.dependsOn("generateTestGrammarSource")


// coverage
//cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report

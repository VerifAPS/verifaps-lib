import java.text.SimpleDateFormat

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.9.10" apply false
    id("org.jetbrains.dokka") version "1.9.0"
    id "org.sonarqube" version "4.3.1.3277"
    id "com.github.ben-manes.versions" version "0.48.0"
}

tasks.named("dokkaHtml") {
    outputDirectory = file("$buildDir/dokka")
}


allprojects {
    apply plugin: 'idea'
    group = 'edu.kit.iti.formal.automation'
    version "0.12.0"

    idea {
        module {
            downloadJavadoc = false
            downloadSources = true
        }
    }

    repositories{
        mavenCentral()
        jcenter()
    }

    sonarqube {
        properties {
            property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
            property "sonar.exclusions", "*/build/generated-src/antlr/**"
            property "sonar.c.file.suffixes", "-"
            property "sonar.cpp.file.suffixes", "-"
            property "sonar.objc.file.suffixes", "-"
        }
    }
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    ext.kotlin_version = '1.9.10'

    sourceCompatibility = 17
    targetCompatibility = 17

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            suppressWarnings = true
            jvmTarget = "17"
        }
    }

    test {
        useJUnitPlatform {
            //excludeTag 'edu.kit.iti.formal.automation.tests.CategoryNonCI'
        }

        jacoco {

        }
    }

    jacoco {
        toolVersion = "0.8.6"
    }


    jacocoTestReport {
        reports {
            //TODO adapt for gradle 8.0
            //xml.enabled true
            //csv.enabled false
        }
    }

    task testJar(type: Jar) {
        archiveClassifier.set('tests')
        from sourceSets.test.output
        from sourceSets.test.resources
    }

    compileKotlin {
        kotlinOptions {
            suppressWarnings = true
            jvmTarget = "17"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        implementation group: 'org.jetbrains', name: 'annotations', version: '24.0.1'
        implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.9'
        implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.9'
        testImplementation 'com.google.truth:truth:1.1.5'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

        testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: '1.9.0'
        testImplementation project(':utils-test')
    }

    test {
        useJUnitPlatform()
    }

    task versionInfo(type: WriteProperties) {
            outputFile = new java.io.File(sourceSets.main.resources.srcDirs.first(), "META-INF/version.property")
            def gitversion = "1"//"git describe --tags".execute()
            //gitversion.waitFor()
            def gv = "1.0" //gitversion.in.readLines().get(0)

            setProperties([
                    "project-name"   : project.name ?: "",
                    "project-version": project.version ?: "0",
                    "description"    : description ?: "",
                    'built-by'       : System.properties['user.name'],
                    'build-timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                    'build-revision' : gv,
                    'created-by'     : "Gradle ${gradle.gradleVersion}",
                    'build-jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                    'build-os'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
            ])
    }

    processResources.dependsOn << versionInfo

    jar {
        manifest {
            attributes(
                    "Implementation-Title": project.name,
                    "Implementation-Version": version ?: "0",
                    "Description": description,
                    'Built-By': System.properties['user.name'],
                    'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                    'Created-By': "Gradle ${gradle.gradleVersion}",
                    'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                    'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
            )
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/verifaps/verifaps-lib")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("PASSWORD")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = project.name
                    description = project.description
                    url = 'https://formal.iti.kit.edu/verifaps'
                    licenses {
                        license {
                            name = 'Gnu Public License, Version 3.0'
                            url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                        }
                    }
                    developers {
                        developer {
                            id = 'weigl'
                            name = 'Alexander Weigl'
                            email = 'weigl@kit.edu'
                        }
                    }
                    scm {
                        connection = 'https://github.com/verifaps/verifaps-lib.git'
                        url = 'https://github.com/verifaps/verifaps-lib.git'
                    }
                }
            }
        }
    }

    javadoc {
        failOnError = false
        verbose = false
    }

    /*
    license {
        mapping("java", "PHP")
        mapping("kt", "PHP")

        header = file("gradle/HEADER")
        ext.name = "geteta"
        ext.holder = "Alexander Weigl <weigl@kit.edu>"
        ext.year = "2016-2018"
        exclude "*.xml"
        exclude "*.g4"
        exclude "*.smv"
    }
    */
    //Checks does not work
    //licenseMain.enabled = false
    //licenseTest.enabled = false

    //sourceSets { test { resources { srcDirs "../share/test-resources" } } }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

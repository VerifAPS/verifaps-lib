table Ta_cex {
    var input i_fWeight : INT
    var input i_bLightBarrierEnd : BOOL
    var output bErrorLow : BOOL
    var output bErrorHigh : BOOL

//    |    i_bLightBarrierEnd  |      bErrorLow    |     bErrorHigh     |   DURATION  |
//    |            BOOL        |        BOOL       |        BOOL        |    CYCLE    |
//    |------------------------+-------------------+--------------------+-------------|
// ## When the system starts, it waits until the scale converged to the true weight.
// ## This is done by waiting a certain amount of time. Here cycle time is 100ms, hence
// ## the waiting time T#500ms is compiled to 5 cycles.
// ## No errors should arise regardless of the weight in this time. There are no constraints on the weight
// ## in this table.
//    |            TRUE        |        FALSE      |        FALSE       |  5 cycles  |
// ## The waiting time has elapsed: The measurement i_fWeight becomes valid, and errors can rise
// ## if the weight is too low or too high.
//    |            TRUE        |  =i_fWeight < 60  |  =i_fWeight > 70   |      1     | BEGIN strong repeat
// ## Note, that this measurement is a one shot. Determined once, the system waits again.
// ## Therefore, both error values do not change.
//    |            TRUE        |  =bErrorLow[-1]   |  =bErrorLow[-1]    |            | END
// ## The last two lines are repeated *infinitely* often.

    group 0 [1, 1] {
    	row initWait [5,5] {
            i_bLightBarrierEnd: TRUE
            bErrorLow: FALSE
            bErrorHigh: FALSE
        }

        group omega {
            row 2 [1,1] {
                i_bLightBarrierEnd: TRUE
                bErrorLow:          =(i_fWeight < 60)
                bErrorHigh:         =(i_fWeight > 70)
            }

            row 3 [4,4] {
                i_bLightBarrierEnd: TRUE
                bErrorLow:          =bErrorLow[-1]
                bErrorHigh:         =bErrorHigh[-1]
            }
        }

    }
}